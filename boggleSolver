// Yitzak Hernandez
// 3354424
#include <stdio.h>
#include <stdlib.h>

typedef struct trie{
    int isWord;
    struct trie* nextLetter[26];
} trie;

const int DX[] = {-1, -1, -1, 0, 0, 1, 1, 1};
const int DY[] = {-1, 0, 1, -1, 1, -1, 0, 1};

struct trie* initializer();
struct trie* insertWord(struct trie* myTrie, char word[], int num);
void freeDictionary(struct trie* myTrie);
int searchWord(struct trie* myTrie, char word[], int num);

int inBounds(int x, int y);
void wordChecker(struct trie* myDictionary, char boggleBoard[][4], char isThisAWord[], int i, int j, int x, int y, int tracker[][4]);

int main (){
    struct trie* myDictionary = initializer();
    int dictionarySize, i, j, boggleGames, counter = 0;
    char boggleBoard[4][4];

    //Opens file and puts it into a trie.
    FILE *fp;
    fp = fopen("sampledictionary.txt", "r");
    fscanf(fp, "%d", &dictionarySize);
    for(i=0; i<dictionarySize; i++){
        char word[100];
        fscanf(fp, "%s", word);
        insertWord(myDictionary, word, 0);
    }

    //Input amount of boggle games.
    scanf("%d", &boggleGames);
    while (counter < boggleGames){
        for(i=0; i<4; i++)
            scanf("%s", boggleBoard[i]);

        //Sets up array to store created words
        char isThisAWord[16] = {0};
        for (i=0; i<4; i++){
            for(j=0; j<4; j++){
                //Sets tracker to 0 and changes to 1 when being used.
                int tracker[4][4] = {0};
                tracker[i][j] = 1;
                strncat(isThisAWord, &boggleBoard[i][j], 1);
                wordChecker(myDictionary, boggleBoard, isThisAWord, i, j, 0, 0, tracker);
            }
        }
        counter++;
        printf("\n\n");
    }
/* Used for dictionary debugging.
    printf("search for? ");
    char word[100];
    scanf("%s", word);
    if (searchWord(myDictionary, word, 0) == 0){
        printf("%s is part of a word", word);
    }
    else if (searchWord(myDictionary, word, 0) == 1){
        printf("%s is a word in main");
    }
    else if (searchWord(myDictionary, word, 0) == 2){
        printf("%s is not a word", word);
    }
    */
    freeDictionary(myDictionary);
}

// Reiterates the boggle puzzle and looks for words.
void wordChecker(struct trie* myDictionary, char boggleBoard[][4], char isThisAWord[], int i, int j, int x, int y, int tracker[][4]){
    //If its a word it prints.
    if (searchWord(myDictionary, isThisAWord, 0) == 1){
        printf("%s\n", isThisAWord);
        return;
    }

    //If its part of a word, is inbounds and tracker has not been triggered.
    if (searchWord(myDictionary, isThisAWord, 0) == 0 && inBounds((i+DX[x]),(j+DY[y]))
                            && haveWeBeenHere(i+DX[x],j+DY[y], tracker)){
        strncat(isThisAWord, &boggleBoard[i+DX[x]][j+DY[y]], 1);
        x = -1;
        y = -1;
        wordChecker(myDictionary, boggleBoard, isThisAWord, i, j, x+1, y+1, tracker);
    } else if (x > 8)
        return;
    wordChecker(myDictionary, boggleBoard, isThisAWord, i, j, x+1, y+1, tracker);
    return;

}

//Checks to see if when adding each letter of the that the letter is not out of bounds.
int inBounds(int x, int y){
    if (x > 4 || x < 0 || y > 4 || y < 0)
        return 0;
    return 1;
}

// Makes sure that we do not go to the same letter twice.
int haveWeBeenHere(int i, int j, int tracker[][4]){
    if(tracker[i][j] == 0){
        tracker[i][j] == 1;
        return 1;
    }
    return 0;
}

//Initializes the trie.
struct trie* initializer(){
    struct trie* myTrie = malloc(sizeof(struct trie));
    myTrie-> isWord = 0;

    int i;
    for(i=0; i<26; i++)
        myTrie->nextLetter[i] = NULL;

    return myTrie;
}

// Inserts word from dictionary into trie.
struct trie* insertWord(struct trie* myTrie, char word[], int num){
    if (num == strlen(word)){
        myTrie->isWord = 1;
        return;
    }

    int nextIndex = word[num] - 'a';
    if(myTrie->nextLetter[nextIndex] == NULL)
        myTrie->nextLetter[nextIndex] = initializer();

    insertWord(myTrie->nextLetter[nextIndex], word, num+1);
}

// Searches for a word on the dictionary trie. If its a word the return is 1, if its part of a word
// the return is 0, if its not a word the return is 2.
int searchWord(struct trie* myTrie, char word[], int num){
int test = strlen(word);
    int nextIndex = word[num] - 'a';
	if (num == strlen(word))
        return myTrie->isWord;

	if (myTrie->nextLetter[nextIndex] == NULL)
		return 2;

    return searchWord(myTrie->nextLetter[nextIndex], word, num+1);
}

// Free the dictionary.
void freeDictionary(struct trie* myTrie){
    int i;
	for(i=0; i<26; i++)
		if (myTrie->nextLetter[i] != NULL)
			freeDictionary(myTrie->nextLetter[i]);
	free(myTrie);
}

